{"version":3,"sources":["Display.js","Provider.js","serviceWorker.js","index.js"],"names":["Display","props","state","services","fetch","then","resp","json","result","setState","data","className","this","map","item","i","links","self","React","Component","Provider","providers","src","attributes","name","subspecialties","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2MAwDgBA,G,uDApDhB,WAAYC,GACX,IAAD,8BACA,cAAMA,IAEDC,MAAM,CAEPC,SAAS,MALb,E,gEAYoB,IAAD,OACnBC,MAAM,4EAA4EC,MAAK,SAACC,GACxFA,EAAKC,OAAOF,MAAK,SAACG,GAEd,EAAKC,SAAS,CAACN,SAASK,EAAOE,e,+BAWnC,OACA,yBAAKC,UAAU,WAEf,mEAKIC,KAAKV,MAAMC,SACVS,KAAKV,MAAMC,SAASU,KAAI,SAACC,EAAKC,GAAN,OACxB,6BACI,2BACKD,EAAKE,MAAMC,UAKlB,U,GA/CeC,IAAMC,YCsEZC,E,kDAnEhB,aACC,IAAD,8BACA,gBACKlB,MAAM,CAEPmB,UAAU,MAJd,E,gEAQoB,IAAD,OACnBjB,MAAM,yJAAyJC,MAAK,SAACC,GACrKA,EAAKC,OAAOF,MAAK,SAACG,GAEd,EAAKC,SAAS,CAACY,UAAUb,EAAOE,e,+BAWpC,OACA,yBAAKC,UAAU,YAEf,oEAKIC,KAAKV,MAAMmB,UACVT,KAAKV,MAAMmB,UAAUR,KAAI,SAACC,EAAKC,GAAN,OACzB,6BACI,+BACP,4BACI,4BACA,2BACJ,yBAAKO,IAAKR,EAAKS,WAAW,qBAG1B,4BAEA,2BACKT,EAAKS,WAAWC,MAGrB,2BAAIV,EAAKS,WAAWE,uBAYf,U,GA9DgBP,IAAMC,WCSTO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d19bb0ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nclass Display extends React.Component\r\n{\r\nconstructor(props)\r\n{\r\nsuper(props);\r\n\r\nthis.state={\r\n\r\n    services:null\r\n   \r\n}\r\n\r\n}\r\n\r\n\r\ncomponentDidMount(){\r\nfetch('https://api.inquickerstaging.com/v3/winter.inquickerstaging.com/services').then((resp) => {\r\nresp.json().then((result) => {\r\n\r\n    this.setState({services:result.data})\r\n\r\n})\r\n\r\n})\r\n\r\n}\r\n\r\n\r\nrender()\r\n{\r\nreturn (\r\n<div className=\"Display\">\r\n\r\n<h1>\r\n    Fetch API data for service(Control)\r\n    </h1>\r\n{\r\n\r\n    this.state.services ?\r\n     this.state.services.map((item,i)=>\r\n     <div>\r\n         <p >\r\n             {item.links.self}\r\n            \r\n         </p>\r\n         </div>\r\n     \r\n     ):null\r\n}\r\n\r\n\r\n</div>\r\n)}\r\n\r\n}export default Display;","import React from 'react';\r\nimport './App.css';\r\n\r\nclass Provider extends React.Component\r\n{\r\nconstructor()\r\n{\r\nsuper();\r\nthis.state={\r\n\r\n    providers:null\r\n}\r\n\r\n}\r\ncomponentDidMount(){\r\nfetch('https://api.inquickerstaging.com/v3/winter.inquickerstaging.com/providers?include=locations%2Cschedules.location&page%5Bnumber%5D=1&page%5Bsize%5D=10').then((resp) => {\r\nresp.json().then((result) => {\r\n\r\n    this.setState({providers:result.data})\r\n\r\n})\r\n\r\n})\r\n\r\n}\r\n\r\n\r\nrender()\r\n{\r\nreturn (\r\n<div className=\"Provider\">\r\n\r\n<h1>\r\n    Fetch API data for Provider(Results)\r\n    </h1>\r\n{\r\n\r\n    this.state.providers ?\r\n     this.state.providers.map((item,i)=>\r\n     <div>\r\n         <table>\r\n  <tr>\r\n      <td>\r\n      <p>\r\n  <img src={item.attributes[\"profile-image\"]}  /> \r\n  </p>\r\n  </td>\r\n  <td>\r\n  \r\n  <p>  \r\n      {item.attributes.name}\r\n   \r\n  </p>\r\n  <p>{item.attributes.subspecialties}</p>\r\n  </td>\r\n \r\n  \r\n \r\n  </tr>\r\n\r\n\r\n         </table>\r\n        \r\n         </div>\r\n     \r\n     ):null\r\n}\r\n\r\n\r\n</div>\r\n)}\r\n\r\n}export default Provider;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport App from './Display';\nimport Provider from './Provider';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Provider />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}